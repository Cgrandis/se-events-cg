// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  password   String?
  role       Role     @default(USER)
  events     EventSignup[]
  organizedEvents Event[] @relation("UserOrganizedEvents")
  accounts   Account[]
  sessions   Session[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  organizer   User     @relation("UserOrganizedEvents", fields: [organizerId], references: [id])
  organizerId String
  signups     EventSignup[]
}

model EventSignup {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  event     Event  @relation(fields: [eventId], references: [id])
  eventId   String
}

enum Role {
  USER
  STAFF
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  @unique
  refresh_token      String? 
  access_token       String? 
  expires_at         Int? 
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure correct indexing
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}